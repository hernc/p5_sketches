// generateText - does the main job of setting the provided textfunction generateText(_text) {    // find folder that contains this script    var scriptFolder = (new File($.fileName)).parent;    // type setting options    var letterHeight = 60;    var letterWidth = 30;    var letterSpacing = letterWidth + 15;    var text_lineHeight = letterHeight + 20;    var fontFilePath = scriptFolder + "/sutton_all_30x60.ai";    // get handle on the open document - our target    var targetDoc = app.activeDocument;    // and open the illustrator "font" file so we can copy letters out of it    var fontDocument = app.open(new File(fontFilePath));    // focus on the target document    app.activeDocument = targetDoc;    // create a group to hold our set type    var outputGroup = targetDoc.activeLayer.groupItems.add();    outputGroup.name = "Generated_Text";    outputGroup.move(targetDoc, ElementPlacement.PLACEATEND);    // text_column and text_line hold the position of the next character    var text_column = 0;    var text_line = 0;    // loop through the letters    for (var i = 0; i < _text.length; i++) {        // t is the letter to set next        var t = _text[i];        if (t == "\n") {            text_line++;            text_column = 0;        } else {            letter = getLayerForChar(fontDocument, t);            if (letter) {                // find position of the source glyph                var offset = letter.position;                // create duplicate of glyph in the target document                var dup = letter.duplicate(targetDoc, ElementPlacement.PLACEATEND);                // move duplicate into outputGroup                dup.move(outputGroup, ElementPlacement.PLACEATEND);                // position it based on typesetting options                dup.position = [(text_column * letterSpacing) + offset[0], (-text_line *                    text_lineHeight) + offset[1]];                // make sure it is shown                dup.hidden = false;            }            text_column++;        }    }    //position outputGroup in the top left corner of the doc    outputGroup.position = [0, 0];}// getLayerForChar - find the layer in the font file with the correct name for the given character, pull the shape and return itfunction getLayerForChar(_fontDocument, _char) {    var data = charData[_char];    if (!data) {        return;    }    // if there is not a stored result    if (!data.layer) {        // find the layer and store it, for next time, faster than looking every time        // we want the first item in the layer with the matching name for the current caracter        data.layer = findLayerByName(_fontDocument, "char-" + data.name).pageItems[0];    }    // return layer    return data.layer;}// findLayerByName - finds the layer with _name in _document (case sesitive)// layers.getByName is not case sesitivefunction findLayerByName(_document, _name){        var layers = _document.layers;    for (var i = 0; i < layers.length; i++) {        if (layers[i].name === _name) {            return layers[i];        }    }}var charData = {    "a": { name: "a" },    "b": { name: "b" },    "c": { name: "c" },    "d": { name: "d" },    "e": { name: "e" },    "f": { name: "f" },    "g": { name: "g" },    "h": { name: "h" },    "i": { name: "i" },    "j": { name: "j" },    "k": { name: "k" },    "l": { name: "l" },    "m": { name: "m" },    "n": { name: "n" },    "o": { name: "o" },    "p": { name: "p" },    "q": { name: "q" },    "r": { name: "r" },    "s": { name: "s" },    "t": { name: "t" },    "u": { name: "u" },    "v": { name: "v" },    "w": { name: "w" },    "x": { name: "x" },    "y": { name: "y" },    "z": { name: "z" },    "A": { name: "A" },    "B": { name: "B" },    "C": { name: "C" },    "D": { name: "D" },    "E": { name: "E" },    "F": { name: "F" },    "G": { name: "G" },    "H": { name: "H" },    "I": { name: "I" },    "J": { name: "J" },    "K": { name: "K" },    "L": { name: "L" },    "M": { name: "M" },    "N": { name: "N" },    "O": { name: "O" },    "P": { name: "P" },    "Q": { name: "Q" },    "R": { name: "R" },    "S": { name: "S" },    "T": { name: "T" },    "U": { name: "U" },    "V": { name: "V" },    "W": { name: "W" },    "X": { name: "X" },    "Y": { name: "Y" },    "Z": { name: "Z" },    "0": { name: "0" },    "1": { name: "1" },    "2": { name: "2" },    "3": { name: "3" },    "4": { name: "4" },    "5": { name: "5" },    "6": { name: "6" },    "7": { name: "7" },    "8": { name: "8" },    "9": { name: "9" },    "-": { name: "dash" },    "—": { name: "dash" },    '"': { name: "doublequote" },    "“": { name: "doublequote" },    "”": { name: "doublequote" },    "'": { name: "quote" },    "’": { name: "quote" },    ",": { name: "comma" },    "~": { name: "tilde" },    ":": { name: "colon" },    ";": { name: "semicolon" },    "?": { name: "question" },    ".": { name: "period" },    "!": { name: "exclamation" },    "&": { name: "ampersand" },    "#": { name: "pound" },    "|": { name: "bar" },    "\\": { name: "backslash" },    "/": { name: "slash" },    ")": { name: "parenthright" },    "(": { name: "parenthleft" },    "%": { name: "percent" },    ">": { name: "greaterthan" },    "<": { name: "lessthan" },    "}": { name: "curlyright" },    "{": { name: "curlyleft" },    "]": { name: "bracketright" },    "[": { name: "bracketleft" },    "^": { name: "caret" },    "@": { name: "at" },    "$": { name: "dollar" },    "=": { name: "equal" },    "+": { name: "plus" },    "*": { name: "asterix" },    "_": { name: "underscore" }};